# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file={{ NIFI_FLOW_CONFIGURATION_FILE | default('./conf/flow/flow.xml.gz') }}
nifi.flow.configuration.archive.enabled={{ NIFI_FLOW_CONFIGURATION_ARCHIVE_ENABLED | default('true') }}
nifi.flow.configuration.archive.dir={{ NIFI_FLOW_CONFIGURATION_ARCHIVE_DIR | default('./conf/flow/archive/') }}
nifi.flow.configuration.archive.max.time={{ NIFI_FLOW_CONFIGURATION_ARCHIVE_MAX_TIME | default('30 days') }}
nifi.flow.configuration.archive.max.storage={{ NIFI_FLOW_CONFIGURATION_ARCHIVE_MAX_STORAGE | default('500 MB') }}
nifi.flow.configuration.archive.max.count={{ NIFI_FLOW_CONFIGURATION_ARCHIVE_MAX_COUNT | default('') }}
nifi.flowcontroller.autoResumeState={{ NIFI_FLOWCONTROLLER_AUTORESUMESTATE | default('true') }}
nifi.flowcontroller.graceful.shutdown.period={{ NIFI_FLOWCONTROLLER_GRACEFUL_SHUTDOWN_PERIOD | default('10 sec') }}
nifi.flowservice.writedelay.interval={{ NIFI_FLOWSERVICE_WRITEDELAY_INTERVAL | default('500 ms') }}
nifi.administrative.yield.duration={{ NIFI_ADMINISTRATIVE_YIELD_DURATION | default('30 sec') }}
# If a component has no work to do (is "bored"), how long should we wait before checking again for work?
nifi.bored.yield.duration={{ NIFI_BORED_YIELD_DURATION | default('10 millis') }}
nifi.queue.backpressure.count={{ NIFI_QUEUE_BACKPRESSURE_COUNT | default('10000') }}
nifi.queue.backpressure.size={{ NIFI_QUEUE_BACKPRESSURE_SIZE | default('1 GB') }}

nifi.authorizer.configuration.file={{ NIFI_AUTHORIZER_CONFIGURATION_FILE | default('./conf/authorizers.xml') }}
nifi.login.identity.provider.configuration.file={{ NIFI_LOGIN_IDENTITY_PROVIDER_CONFIGURATION_FILE | default('./conf/login-identity-providers.xml') }}
nifi.templates.directory={{ NIFI_TEMPLATES_DIRECTORY | default('./conf/templates') }}
nifi.ui.banner.text={{ NIFI_UI_BANNER_TEXT | default('') }}
nifi.ui.autorefresh.interval={{ NIFI_UI_AUTOREFRESH_INTERVAL | default('30 sec') }}
nifi.nar.library.directory={{ NIFI_NAR_LIBRARY_DIRECTORY | default('./lib') }}
nifi.nar.library.autoload.directory={{ NIFI_NAR_LIBRARY_AUTOLOAD_DIRECTORY | default('./extensions') }}
nifi.nar.working.directory={{ NIFI_NAR_WORKING_DIRECTORY | default('./work/nar/') }}
nifi.documentation.working.directory={{ NIFI_DOCUMENTATION_WORKING_DIRECTORY | default('./work/docs/components') }}

####################
# State Management #
####################
nifi.state.management.configuration.file={{ NIFI_STATE_MANAGEMENT_CONFIGURATION_FILE | default('./conf/state-management.xml') }}
# The ID of the local state provider
nifi.state.management.provider.local={{ NIFI_STATE_MANAGEMENT_PROVIDER_LOCAL | default('local-provider') }}
# The ID of the cluster-wide state provider. This will be ignored if NiFi is not clustered but must be populated if running in a cluster.
nifi.state.management.provider.cluster={{ NIFI_STATE_MANAGEMENT_PROVIDER_CLUSTER | default('zk-provider') }}
# Specifies whether or not this instance of NiFi should run an embedded ZooKeeper server
nifi.state.management.embedded.zookeeper.start={{ NIFI_STATE_MANAGEMENT_EMBEDDED_ZOOKEEPER_START | default('false') }}
# Properties file that provides the ZooKeeper properties to use if <nifi.state.management.embedded.zookeeper.start> is set to true
nifi.state.management.embedded.zookeeper.properties={{ NIFI_STATE_MANAGEMENT_EMBEDDED_ZOOKEEPER_PROPERTIES | default('./conf/zookeeper.properties') }}


# H2 Settings
nifi.database.directory={{ NIFI_DATABASE_DIRECTORY | default('./database_repository') }}
nifi.h2.url.append={{ NIFI_H2_URL_APPEND | default(';LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE') }}

# FlowFile Repository
nifi.flowfile.repository.implementation={{ NIFI_FLOWFILE_REPOSITORY_IMPLEMENTATION | default('org.apache.nifi.controller.repository.WriteAheadFlowFileRepository') }}
nifi.flowfile.repository.wal.implementation={{ NIFI_FLOWFILE_REPOSITORY_WAL_IMPLEMENTATION | default('org.apache.nifi.wali.SequentialAccessWriteAheadLog') }}
nifi.flowfile.repository.directory={{ NIFI_FLOWFILE_REPOSITORY_DIRECTORY | default('./flowfile_repository') }}
nifi.flowfile.repository.checkpoint.interval={{ NIFI_FLOWFILE_REPOSITORY_CHECKPOINT_INTERVAL | default('20 secs') }}
nifi.flowfile.repository.always.sync={{ NIFI_FLOWFILE_REPOSITORY_ALWAYS_SYNC | default('false') }}
nifi.flowfile.repository.encryption.key.provider.implementation={{ NIFI_FLOWFILE_REPOSITORY_ENCRYPTION_KEY_PROVIDER_IMPLEMENTATION | default('') }}
nifi.flowfile.repository.encryption.key.provider.location={{ NIFI_FLOWFILE_REPOSITORY_ENCRYPTION_KEY_PROVIDER_LOCATION | default('') }}
nifi.flowfile.repository.encryption.key.id={{ NIFI_FLOWFILE_REPOSITORY_ENCRYPTION_KEY_ID | default('') }}
nifi.flowfile.repository.encryption.key={{ NIFI_FLOWFILE_REPOSITORY_ENCRYPTION_KEY | default('') }}
nifi.flowfile.repository.retain.orphaned.flowfiles={{ NIFI_FLOWFILE_REPOSITORY_RETAIN_ORPHANED_FLOWFILES | default('true') }}

nifi.swap.manager.implementation={{ NIFI_SWAP_MANAGER_IMPLEMENTATION | default('org.apache.nifi.controller.FileSystemSwapManager') }}
nifi.queue.swap.threshold={{ NIFI_QUEUE_SWAP_THRESHOLD | default('20000') }}

# Content Repository
nifi.content.repository.implementation={{ NIFI_CONTENT_REPOSITORY_IMPLEMENTATION | default('org.apache.nifi.controller.repository.FileSystemRepository') }}
nifi.content.claim.max.appendable.size={{ NIFI_CONTENT_CLAIM_MAX_APPENDABLE_SIZE | default('1 MB') }}
nifi.content.repository.directory.default={{ NIFI_CONTENT_REPOSITORY_DIRECTORY_DEFAULT | default('./content_repository') }}
nifi.content.repository.archive.max.retention.period={{ NIFI_CONTENT_REPOSITORY_ARCHIVE_MAX_RETENTION_PERIOD | default('7 days') }}
nifi.content.repository.archive.max.usage.percentage={{ NIFI_CONTENT_REPOSITORY_ARCHIVE_MAX_USAGE_PERCENTAGE | default('50%') }}
nifi.content.repository.archive.enabled={{ NIFI_CONTENT_REPOSITORY_ARCHIVE_ENABLED | default('true') }}
nifi.content.repository.always.sync={{ NIFI_CONTENT_REPOSITORY_ALWAYS_SYNC | default('false') }}
nifi.content.viewer.url={{ NIFI_CONTENT_VIEWER_URL | default('../nifi-content-viewer/') }}
nifi.content.repository.encryption.key.provider.implementation={{ NIFI_CONTENT_REPOSITORY_ENCRYPTION_KEY_PROVIDER_IMPLEMENTATION | default('') }}
nifi.content.repository.encryption.key.provider.location={{ NIFI_CONTENT_REPOSITORY_ENCRYPTION_KEY_PROVIDER_LOCATION | default('') }}
nifi.content.repository.encryption.key.id={{ NIFI_CONTENT_REPOSITORY_ENCRYPTION_KEY_ID | default('') }}
nifi.content.repository.encryption.key={{ NIFI_CONTENT_REPOSITORY_ENCRYPTION_KEY | default('') }}

# Provenance Repository Properties
nifi.provenance.repository.implementation={{ NIFI_PROVENANCE_REPOSITORY_IMPLEMENTATION | default('org.apache.nifi.provenance.WriteAheadProvenanceRepository') }}
nifi.provenance.repository.encryption.key.provider.implementation={{ NIFI_PROVENANCE_REPOSITORY_ENCRYPTION_KEY_PROVIDER_IMPLEMENTATION | default('') }}
nifi.provenance.repository.encryption.key.provider.location={{ NIFI_PROVENANCE_REPOSITORY_ENCRYPTION_KEY_PROVIDER_LOCATION | default('') }}
nifi.provenance.repository.encryption.key.id={{ NIFI_PROVENANCE_REPOSITORY_ENCRYPTION_KEY_ID | default('') }}
nifi.provenance.repository.encryption.key={{ NIFI_PROVENANCE_REPOSITORY_ENCRYPTION_KEY | default('') }}

# Persistent Provenance Repository Properties
nifi.provenance.repository.directory.default={{ NIFI_PROVENANCE_REPOSITORY_DIRECTORY_DEFAULT | default('./provenance_repository') }}
nifi.provenance.repository.max.storage.time={{ NIFI_PROVENANCE_REPOSITORY_MAX_STORAGE_TIME | default('30 days') }}
nifi.provenance.repository.max.storage.size={{ NIFI_PROVENANCE_REPOSITORY_MAX_STORAGE_SIZE | default('10 GB') }}
nifi.provenance.repository.rollover.time={{ NIFI_PROVENANCE_REPOSITORY_ROLLOVER_TIME | default('10 mins') }}
nifi.provenance.repository.rollover.size={{ NIFI_PROVENANCE_REPOSITORY_ROLLOVER_SIZE | default('100 MB') }}
nifi.provenance.repository.query.threads={{ NIFI_PROVENANCE_REPOSITORY_QUERY_THREADS | default('2') }}
nifi.provenance.repository.index.threads={{ NIFI_PROVENANCE_REPOSITORY_INDEX_THREADS | default('2') }}
nifi.provenance.repository.compress.on.rollover={{ NIFI_PROVENANCE_REPOSITORY_COMPRESS_ON_ROLLOVER | default('true') }}
nifi.provenance.repository.always.sync={{ NIFI_PROVENANCE_REPOSITORY_ALWAYS_SYNC | default('false') }}
# Comma-separated list of fields. Fields that are not indexed will not be searchable. Valid fields are:
# EventType, FlowFileUUID, Filename, TransitURI, ProcessorID, AlternateIdentifierURI, Relationship, Details
nifi.provenance.repository.indexed.fields={{ NIFI_PROVENANCE_REPOSITORY_INDEXED_FIELDS | default('EventType, FlowFileUUID, Filename, ProcessorID, Relationship') }}
# FlowFile Attributes that should be indexed and made searchable.  Some examples to consider are filename, uuid, mime.type
nifi.provenance.repository.indexed.attributes={{ NIFI_PROVENANCE_REPOSITORY_INDEXED_ATTRIBUTES | default('') }}
# Large values for the shard size will result in more Java heap usage when searching the Provenance Repository
# but should provide better performance
nifi.provenance.repository.index.shard.size={{ NIFI_PROVENANCE_REPOSITORY_INDEX_SHARD_SIZE | default('500 MB') }}
# Indicates the maximum length that a FlowFile attribute can be when retrieving a Provenance Event from
# the repository. If the length of any attribute exceeds this value, it will be truncated when the event is retrieved.
nifi.provenance.repository.max.attribute.length={{ NIFI_PROVENANCE_REPOSITORY_MAX_ATTRIBUTE_LENGTH | default('65536') }}
nifi.provenance.repository.concurrent.merge.threads={{ NIFI_PROVENANCE_REPOSITORY_CONCURRENT_MERGE_THREADS | default('2') }}


# Volatile Provenance Respository Properties
nifi.provenance.repository.buffer.size={{ NIFI_PROVENANCE_REPOSITORY_BUFFER_SIZE | default('100000') }}

# Component Status Repository
nifi.components.status.repository.implementation={{ NIFI_COMPONENTS_STATUS_REPOSITORY_IMPLEMENTATION | default('org.apache.nifi.controller.status.history.VolatileComponentStatusRepository') }}
nifi.components.status.repository.buffer.size={{ NIFI_COMPONENTS_STATUS_REPOSITORY_BUFFER_SIZE | default('1440') }}
nifi.components.status.snapshot.frequency={{ NIFI_COMPONENTS_STATUS_SNAPSHOT_FREQUENCY | default('1 min') }}

# Site to Site properties
nifi.remote.input.host={{ HOSTNAME }}
nifi.remote.input.secure={{ NIFI_REMOTE_INPUT_SECURE | default('false') }}
nifi.remote.input.socket.port={{ NIFI_REMOTE_INPUT_SOCKET_PORT | default('') }}
nifi.remote.input.http.enabled={{ NIFI_REMOTE_INPUT_HTTP_ENABLED | default('true') }}
nifi.remote.input.http.transaction.ttl={{ NIFI_REMOTE_INPUT_HTTP_TRANSACTION_TTL | default('30 sec') }}
nifi.remote.contents.cache.expiration={{ NIFI_REMOTE_CONTENTS_CACHE_EXPIRATION | default('30 secs') }}

# web properties #
#############################################

# For security, NiFi will present the UI on 127.0.0.1 and only be accessible through this loopback interface.
# Be aware that changing these properties may affect how your instance can be accessed without any restriction.
# We recommend configuring HTTPS instead. The administrators guide provides instructions on how to do this.

{% if NIFI_WEB_HTTPS_PORT is not defined %}
nifi.web.http.host={{ HOSTNAME }}
nifi.web.http.port={{ NIFI_WEB_HTTP_PORT | default('8080') }}
nifi.web.http.network.interface.default={{ NIFI_WEB_HTTP_NETWORK_INTERFACE_DEFAULT | default('') }}
{% endif %}

#############################################

nifi.web.https.host={{ HOSTNAME }}
nifi.web.https.port={{ NIFI_WEB_HTTPS_PORT | default('') }}
nifi.web.https.network.interface.default={{ NIFI_WEB_HTTPS_NETWORK_INTERFACE_DEFAULT | default('') }}
nifi.web.jetty.working.directory={{ NIFI_WEB_JETTY_WORKING_DIRECTORY | default('./work/jetty') }}
nifi.web.jetty.threads={{ NIFI_WEB_JETTY_THREADS | default('200') }}
nifi.web.max.header.size={{ NIFI_WEB_MAX_HEADER_SIZE | default('16 KB') }}
nifi.web.proxy.context.path={{ NIFI_WEB_PROXY_CONTEXT_PATH | default('') }}
nifi.web.proxy.host={{ NIFI_WEB_PROXY_HOST | default('') }}
nifi.web.max.content.size={{ NIFI_WEB_MAX_CONTENT_SIZE | default('') }}
nifi.web.max.requests.per.second={{ NIFI_WEB_MAX_REQUESTS_PER_SECOND | default('30000') }}
nifi.web.should.send.server.version={{ NIFI_WEB_SHOULD_SEND_SERVER_VERSION | default('true') }}

# security properties #
nifi.sensitive.props.key={{ NIFI_SENSITIVE_PROPS_KEY | default('') }}
nifi.sensitive.props.key.protected={{ NIFI_SENSITIVE_PROPS_KEY_PROTECTED | default('') }}
nifi.sensitive.props.algorithm={{ NIFI_SENSITIVE_PROPS_ALGORITHM | default('PBEWITHMD5AND256BITAES-CBC-OPENSSL') }}
nifi.sensitive.props.provider={{ NIFI_SENSITIVE_PROPS_PROVIDER | default('BC') }}
nifi.sensitive.props.additional.keys={{ NIFI_SENSITIVE_PROPS_ADDITIONAL_KEYS | default('') }}

nifi.security.keystore={{ NIFI_SECURITY_KEYSTORE | default('') }}
nifi.security.keystoreType={{ NIFI_SECURITY_KEYSTORE_TYPE | default('') }}
nifi.security.keystorePasswd={{ NIFI_SECURITY_KEYSTORE_PASSWD | default('') }}
nifi.security.keyPasswd={{ NIFI_SECURITY_KEY_PASSWD | default('') }}
nifi.security.truststore={{ NIFI_SECURITY_TRUSTSTORE | default('') }}
nifi.security.truststoreType={{ NIFI_SECURITY_TRUSTSTORE_TYPE | default('') }}
nifi.security.truststorePasswd={{ NIFI_SECURITY_TRUSTSTORE_PASSWD | default('') }}
nifi.security.user.authorizer={{ NIFI_SECURITY_USER_AUTHORIZER | default('managed-authorizer') }}
nifi.security.allow.anonymous.authentication={{ NIFI_SECURITY_ALLOW_ANONYMOUS_AUTHENTICATION | default('false') }}
nifi.security.user.login.identity.provider={{ NIFI_SECURITY_USER_LOGIN_IDENTITY_PROVIDER | default('') }}
nifi.security.ocsp.responder.url={{ NIFI_SECURITY_OCSP_RESPONDER_URL | default('') }}
nifi.security.ocsp.responder.certificate={{ NIFI_SECURITY_OCSP_RESPONDER_CERTIFICATE | default('') }}

# OpenId Connect SSO Properties #
nifi.security.user.oidc.discovery.url={{ NIFI_SECURITY_USER_OIDC_DISCOVERY_URL | default('') }}
nifi.security.user.oidc.connect.timeout={{ NIFI_SECURITY_USER_OIDC_CONNECT_TIMEOUT | default('5 secs') }}
nifi.security.user.oidc.read.timeout={{ NIFI_SECURITY_USER_OIDC_READ_TIMEOUT | default('5 secs') }}
nifi.security.user.oidc.client.id={{ NIFI_SECURITY_USER_OIDC_CLIENT_ID | default('') }}
nifi.security.user.oidc.client.secret={{ NIFI_SECURITY_USER_OIDC_CLIENT_SECRET | default('') }}
nifi.security.user.oidc.preferred.jwsalgorithm={{ NIFI_SECURITY_USER_OIDC_PREFERRED_JWSALGORITHM | default('') }}
nifi.security.user.oidc.additional.scopes={{ NIFI_SECURITY_USER_OIDC_ADDITIONAL_SCOPES | default('') }}
nifi.security.user.oidc.claim.identifying.user={{ NIFI_SECURITY_USER_OIDC_CLAIM_IDENTIFYING_USER | default('') }}
nifi.security.user.oidc.fallback.claims.identifying.user={{ NIFI_SECURITY_USER_OIDC_FALLBACK_CLAIMS_IDENTIFYING_USER | default('') }}

# Apache Knox SSO Properties #
nifi.security.user.knox.url={{ NIFI_SECURITY_USER_KNOX_URL | default('') }}
nifi.security.user.knox.publicKey={{ NIFI_SECURITY_USER_KNOX_PUBLICKEY | default('') }}
nifi.security.user.knox.cookieName={{ NIFI_SECURITY_USER_KNOX_COOKIENAME | default('hadoop-jwt') }}
nifi.security.user.knox.audiences={{ NIFI_SECURITY_USER_KNOX_AUDIENCES | default('') }}

# SAML Properties #
nifi.security.user.saml.idp.metadata.url={{ NIFI_SECURITY_USER_SAML_IDP_METADATA_URL | default('') }}
nifi.security.user.saml.sp.entity.id={{ NIFI_SECURITY_USER_SAML_SP_ENTITY_ID | default('') }}
nifi.security.user.saml.identity.attribute.name={{ NIFI_SECURITY_USER_SAML_IDENTITY_ATTRIBUTE_NAME | default('') }}
nifi.security.user.saml.group.attribute.name={{ NIFI_SECURITY_USER_SAML_GROUP_ATTRIBUTE_NAME | default('') }}
nifi.security.user.saml.metadata.signing.enabled={{ NIFI_SECURITY_USER_SAML_METADATA_SIGNING_ENABLED | default('false') }}
nifi.security.user.saml.request.signing.enabled={{ NIFI_SECURITY_USER_SAML_REQUEST_SIGNING_ENABLED | default('false') }}
nifi.security.user.saml.want.assertions.signed={{ NIFI_SECURITY_USER_SAML_WANT_ASSERTIONS_SIGNED | default('true') }}
nifi.security.user.saml.signature.algorithm={{ NIFI_SECURITY_USER_SAML_SIGNATURE_ALGORITHM | default('http://www.w3.org/2001/04/xmldsig-more#rsa-sha256') }}
nifi.security.user.saml.signature.digest.algorithm={{ NIFI_SECURITY_USER_SAML_SIGNATURE_DIGEST_ALGORITHM | default('http://www.w3.org/2001/04/xmlenc#sha256') }}
nifi.security.user.saml.message.logging.enabled={{ NIFI_SECURITY_USER_SAML_MESSAGE_LOGGING_ENABLED | default('false') }}
nifi.security.user.saml.authentication.expiration={{ NIFI_SECURITY_USER_SAML_AUTHENTICATION_EXPIRATION | default('12 hours') }}
nifi.security.user.saml.single.logout.enabled={{ NIFI_SECURITY_USER_SAML_SINGLE_LOGOUT_ENABLED | default('false') }}
nifi.security.user.saml.http.client.truststore.strategy={{ NIFI_SECURITY_USER_SAML_HTTP_CLIENT_TRUSTSTORE_STRATEGY | default('JDK') }}
nifi.security.user.saml.http.client.connect.timeout={{ NIFI_SECURITY_USER_SAML_HTTP_CLIENT_CONNECT_TIMEOUT | default('30 secs') }}
nifi.security.user.saml.http.client.read.timeout={{ NIFI_SECURITY_USER_SAML_HTTP_CLIENT_READ_TIMEOUT | default('30 secs') }}

# Identity Mapping Properties #
# These properties allow normalizing user identities such that identities coming from different identity providers
# (certificates, LDAP, Kerberos) can be treated the same internally in NiFi. The following example demonstrates normalizing
# DNs from certificates and principals from Kerberos into a common identity string:
#
nifi.security.identity.mapping.pattern.dn={{ NIFI_SECURITY_IDENTITY_MAPPING_PATTERN_DN | default('^(.*)$') }}
nifi.security.identity.mapping.value.dn={{ NIFI_SECURITY_IDENTITY_MAPPING_VALUE_DN | default('$1') }}
nifi.security.identity.mapping.transform.dn={{ NIFI_SECURITY_IDENTITY_MAPPING_TRANSFORM_DN | default('NONE') }}
# nifi.security.identity.mapping.pattern.kerb=^(.*?)/instance@(.*?)$
# nifi.security.identity.mapping.value.kerb=$1@$2
# nifi.security.identity.mapping.transform.kerb=UPPER

# Group Mapping Properties #
# These properties allow normalizing group names coming from external sources like LDAP. The following example
# lowercases any group name.
#
nifi.security.group.mapping.pattern.anygroup={{ NIFI_SECURITY_GROUP_MAPPING_PATTERN_DN | default('^(.*)$') }}
nifi.security.group.mapping.value.anygroup={{ NIFI_SECURITY_GROUP_MAPPING_PATTERN_DN | default('$1') }}
nifi.security.group.mapping.transform.anygroup={{ NIFI_SECURITY_GROUP_MAPPING_PATTERN_DN | default('LOWER') }}

# cluster common properties (all nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval={{ NIFI_CLUSTER_PROTOCOL_HEARTBEAT_INTERVAL | default('5 sec') }}
nifi.cluster.protocol.heartbeat.missable.max={{ NIFI_CLUSTER_PROTOCOL_HEARTBEAT_MISSABLE_MAX | default('8') }}
nifi.cluster.protocol.is.secure={{ NIFI_CLUSTER_PROTOCOL_IS_SECURE | default('false') }}

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node={{ NIFI_CLUSTER_IS_NODE | default('false') }}
nifi.cluster.node.address={{ NIFI_CLUSTER_NODE_ADDRESS | default(HOSTNAME) }}
nifi.cluster.node.protocol.port={{ NIFI_CLUSTER_NODE_PROTOCOL_PORT | default('11443') }}
nifi.cluster.node.protocol.threads={{ NIFI_CLUSTER_NODE_PROTOCOL_THREADS | default('10') }}
nifi.cluster.node.protocol.max.threads={{ NIFI_CLUSTER_NODE_PROTOCOL_MAX_THREADS | default('50') }}
nifi.cluster.node.event.history.size={{ NIFI_CLUSTER_NODE_EVENT_HISTORY_SIZE | default('25') }}
nifi.cluster.node.connection.timeout={{ NIFI_CLUSTER_NODE_CONNECTION_TIMEOUT | default('5 sec') }}
nifi.cluster.node.read.timeout={{ NIFI_CLUSTER_NODE_READ_TIMEOUT | default('5 sec') }}
nifi.cluster.node.max.concurrent.requests={{ NIFI_CLUSTER_NODE_MAX_CONCURRENT_REQUESTS | default('100') }}
nifi.cluster.firewall.file={{ NIFI_CLUSTER_FIREWALL_FILE | default('') }}
nifi.cluster.flow.election.max.wait.time={{ NIFI_CLUSTER_FLOW_ELECTION_MAX_WAIT_TIME | default('5 mins') }}
nifi.cluster.flow.election.max.candidates={{ NIFI_CLUSTER_FLOW_ELECTION_MAX_CANDIDATES | default('') }}

# cluster load balancing properties #
nifi.cluster.load.balance.host={{ HOSTNAME }}
nifi.cluster.load.balance.port={{ NIFI_CLUSTER_LOAD_BALANCE_PORT | default('6342') }}
nifi.cluster.load.balance.connections.per.node={{ NIFI_CLUSTER_LOAD_BALANCE_CONNECTIONS_PER_NODE | default('1') }}
nifi.cluster.load.balance.max.thread.count={{ NIFI_CLUSTER_LOAD_BALANCE_MAX_THREAD_COUND | default('8') }}
nifi.cluster.load.balance.comms.timeout={{ NIFI_CLUSTER_LOAD_BALANCE_COMMS_TIMEOUT | default('30 sec') }}

# zookeeper properties, used for cluster management #
nifi.zookeeper.connect.string={{ NIFI_ZOOKEEPER_CONNECT_STRING | default('') }}
nifi.zookeeper.connect.timeout={{ NIFI_ZOOKEEPER_CONNECT_TIMEOUT | default('10 secs') }}
nifi.zookeeper.session.timeout={{ NIFI_ZOOKEEPER_SESSION_TIMEOUT | default('10 secs') }}
nifi.zookeeper.root.node={{ NIFI_ZOOKEEPER_ROOT_NODE | default('/nifi') }}
nifi.zookeeper.client.secure={{ NIFI_ZOOKEEPER_CLIENT_SECURE | default('false') }}
nifi.zookeeper.security.keystore={{ NIFI_ZOOKEEPER_SECURITY_KEYSTORE | default('') }}
nifi.zookeeper.security.keystoreType={{ NIFI_ZOOKEEPER_SECURITY_KEYSTORETYPE | default('') }}
nifi.zookeeper.security.keystorePasswd={{ NIFI_ZOOKEEPER_SECURITY_KEYSTOREPASSWD | default('') }}
nifi.zookeeper.security.truststore={{ NIFI_ZOOKEEPER_SECURITY_TRUSTSTORE | default('') }}
nifi.zookeeper.security.truststoreType={{ NIFI_ZOOKEEPER_SECURITY_TRUSTSTORETYPE | default('') }}
nifi.zookeeper.security.truststorePasswd={{ NIFI_ZOOKEEPER_SECURITY_TRUSTSTOREPASSWD | default('') }}

# Zookeeper properties for the authentication scheme used when creating acls on znodes used for cluster management
# Values supported for nifi.zookeeper.auth.type are "default", which will apply world/anyone rights on znodes
# and "sasl" which will give rights to the sasl/kerberos identity used to authenticate the nifi node
# The identity is determined using the value in nifi.kerberos.service.principal and the removeHostFromPrincipal
# and removeRealmFromPrincipal values (which should align with the kerberos.removeHostFromPrincipal and kerberos.removeRealmFromPrincipal
# values configured on the zookeeper server).
nifi.zookeeper.auth.type={{ NIFI_ZOOKEEPER_AUTH_TYPE | default('') }}
nifi.zookeeper.kerberos.removeHostFromPrincipal={{ NIFI_ZOOKEEPER_KERBEROS_REMOVEHOSTFROMPRINCIPAL | default('') }}
nifi.zookeeper.kerberos.removeRealmFromPrincipal={{ NIFI_ZOOKEEPER_KERBEROS_REMOVEREALMFROMPRINCIPAL | default('') }}

# kerberos #
nifi.kerberos.krb5.file={{ NIFI_KERBEROS_KRB5_FILE | default('') }}

# kerberos service principal #
nifi.kerberos.service.principal={{ NIFI_KERBEROS_SERVICE_PRINCIPAL | default('') }}
nifi.kerberos.service.keytab.location={{ NIFI_KERBEROS_SERVICE_KEYTAB_LOCATION | default('') }}

# kerberos spnego principal #
nifi.kerberos.spnego.principal={{ NIFI_KERBEROS_SPNEGO_PRINCIPAL | default('') }}
nifi.kerberos.spnego.keytab.location={{ NIFI_KERBEROS_SPNEGO_KEYTAB_LOCATION | default('') }}
nifi.kerberos.spnego.authentication.expiration={{ NIFI_KERBEROS_SPNEGO_AUTHENTICATION_EXPIRATION | default('12 hours') }}

# external properties files for variable registry
# supports a comma delimited list of file locations
nifi.variable.registry.properties={{ NIFI_VARIABLE_REGISTRY_PROPERTIES | default('') }}

# analytics properties #
nifi.analytics.predict.enabled={{ NIFI_ANALYTICS_PREDICT_ENABLED | default('false') }}
nifi.analytics.predict.interval={{ NIFI_ANALYTICS_PREDICT_INTERVAL | default('3 mins') }}
nifi.analytics.query.interval={{ NIFI_ANALYTICS_QUERY_INTERVAL | default('5 mins') }}
nifi.analytics.connection.model.implementation={{ NIFI_ANALYTICS_CONNECTION_MODEL_IMPLEMENTATION | default('org.apache.nifi.controller.status.analytics.models.OrdinaryLeastSquares') }}
nifi.analytics.connection.model.score.name={{ NIFI_ANALYTICS_CONNECTION_MODEL_SCORE_NAME | default('rSquared') }}
nifi.analytics.connection.model.score.threshold={{ NIFI_ANALYTICS_CONNECTION_MODEL_SCORE_THRESHOLD | default('.90') }}
